
*
 SYNTAX
*

PRODUCTIONS:

Boolean stuff

predicate		:	(STATEMENT|PREDICATE) BOOLEAN_OP (STATEMENT|PREDICATE)
statement		:	EXPR COMPARISON EXPR

ARITHMETIC
TODO evtl. operatoren mit precedence system 

EXPR			:	TERM (+|-) TERM
TERM			:	FACTOR (*|/|%) FACTOR
FACTOR			:	NUMBER|VARIABLE



# FOR-LOOP
#    INIT				
#	CONDITION    <--
#		BLOCK	   |
#		ASSIGNMENT |

FOR ( INIT ; CONDITION ; ASSIGNMENT ) :
	BLOCK


WHILE ( CONDITION ) :
	BLOCK


IF ( CONDITION ) :
	BLOCK
ELIF ( COND ) :
	BLOCK
ELSE : 
	BLOCK





===== COLLECTION DECLARING/INITIALIZING =====


-   str firstname
-   str lastname
-   str country = "DE"
+   str region
-   str city = "Dortmund"

wird zu

-   str:
        firstname
        lastname
        country = "DE"
+       region
        city = "Dortmund"


===== AUTOFILL ======


+   con (str firstname,str lastname,str country,str region, str city, int plz,bln isPremiumUser):
        self.firstname = firstname
        self.lastname = lastname
        self.country = country
        self.region = region
        self.city = city
        self.plz = plz
        self.isPremiumUser = isPremiumUser

wird zu

+   con (str firstname,str lastname,str country,str region, str city, int plz,bln isPremiumUser):
        autofill



   +   fnc User registerUser(str firstname,str lastname,str country,str region, str city, int plz,bln isPremiumUser):
            -> new User(firstname, lastname, country, region, city, plz, isPremiumUser)

wird zu

    +   fnc User registerUser(str firstname,str lastname,str country,str region, str city, int plz,bln isPremiumUser):
            -> new User(autofill)





===== Klassen =====
#Klasse erstellen
-cls Test:
    #code


===== Variablen =====
#deklarieren
int i

#zuweisen
i = 10

#initialisieren
int i = 10


===== Methoden =====
#Standard
+   fnc sagHallo():         # fnc = Funktion ohne Rückgabewert
        print("Hallo")

#Mit Rückgabe
+   int getZahl():
        ->5

#Mit Parameter/n
+   int addieren(int a,int b):
        -> a+b

#Konstruktor
+   con ():
        #code

#Program entry
    ntr ():
        #code

===== Schleifen =====

===== For =====
for(int i = 0,100,1):
    #code

for (20):         # 20 durchläufe ohne variable, naive for-schleife

for(0,20,2):    # definierter durchlauf ohne variable


===== Foreach =====
for(int a : i):
    #code

for (a : i.nachricht)   #Parser sucht selber den passenden Datentypen
    #code

for (i)         # Naive forEach-schleife
    #code

===== While =====
while(!lichtAus):
    #code

===== Do-While =====
do:
    #code
while(lichtAn)


===== If Abfrage =====
if(1 != 10):
    #code

if(i == 1,2,3)        # anstatt if(i == 1 | i == 2 | i == 3)

#if-else
if(a > 10):
    #code
elif (a > 0)
    #code
else:
    #code

===== Switch =====
switch(variable):       #break wird nicht benötigt, da automatisch aufgehört wird
    case 0:
        #code
    case 1,2,3:
        #code
    def:
        #code

evtl. aus spaß:

boomerswitch(variable):       #break wird benötigt, da der Nutzer ein boomer ist
    case 0:
        #code
        break
    case 1,2,3:
        #code
        break
    def:
        #code


===== Fehlerabfrage =====
try:
    #code
net (Exception e):
    #code

oder?:

try:
    #code
cat (Exception e):
    #code
   
   
===== Collection Function Calling =====

Label textLabel = Label()
textLabel.setBackground(Color.pink)
textLabel.setSize(200,50)
textLabel.setFont("Calibri",12)
textLabel.text = "Hallo Welt!"

wird zu:
Label textLabel = Label():
    setBackground(Color.pink)
		  setSize(200,50)
		  setFont("Calibri",12)
    text = "Hallo Welt!"

# erzeugt ein Scope, in dem die Lokalen Funktionen/Variablen direkt genutzt werden können



