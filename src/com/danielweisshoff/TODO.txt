/////////////////////////////////////////////////////////////////////////
  MASTER TODOLIST   MASTER TODOLIST MASTER TODOLIST     MASTER TODOLIST
/////////////////////////////////////////////////////////////////////////


TODO IMPORTANT
Große Planaenderung:
Die Programmiersprache soll zuerst voll-funktionsfähig interpretiert sein.
Kompilierung kommt dann irgendwann nach.
Deswegen:
- erstmal alles, was mit Kompilierung zu tun hat entfernen.
- zu unbenutzten packages readme.md hinzufuegen 
- Die Kette von Lexer bis hin zu Interpreter soll zeilenweise abgearbeitet werden und nicht den ganzen Code vorinterpretieren.
- Die *Build Klassen sind verwirrend
- Die Symboltable sollen während der Laufzeit gefüllt werden
-  Nodes sollen nurnoch Strukturen ohne Logik sein -> Logik von Nodes zum Interpreter schieben
- Variablen sollen nicht mehr im Parser gespeichert werden sondern den Stack/Heap nutzen

TODO
 -  Bitwise operationen einfuegen -> Lexer aktualisieren ( & | ^ ~ << >> )
       * The & (bitwise AND) The result of AND is 1 if both of the two bits are 1.
       * The | (bitwise OR)  The result of OR is 1 if any of the two bits is 1.
       * The ^ (bitwise XOR) The result of XOR is 1 if the two bits are different.
       * The ~ (bitwise NOT) all bits are swapped
       * The << (left shift) takes two numbers, left shifts the bits of the first operand, the second operand decides the number of places to shift.
       * The >> (right shift) takes two numbers, right shifts the bits of the first operand, the second operand decides the number of places to shift.
    Je nachdem worin das Ergebnis gespeichert werden soll, wird entweder bitwise oder boolean algebra angewandt.
 -   Booleans werden und sollen wie bytes behandelt werden. Man soll mit ihnen ganz normal rechnen k�nnen.
     Um zum Beispiel die Summe aller bools zu berechnen, die true sind.
 - ? Wie werden Pointer funktionieren, denn '*' überschneidet sich mit dem static access modifier ? 
 - Das erzeugen von Objekten soll m�glich sein
 - Parameter
 - R�ckgabewerte
 - Objekte sollen als Parameter/R�ckgabewert m�glich sein -> evtl. Data �berarbeiten ?
 - Enums
 - Interfaces
 - Vererbung
 - Casting
 - access modifier hinzufuegen
    * public +
    * private -
    * static *
    * (protected?) /
    * m�gliche Zeichen:  � $ % & ? ~ _ . , : ; < > |
    Werden dann im Symboltable eingetragen. Wenn die get() Methode aufgerufen wird, m�ssen einfach nur neue
    Regelungen basierend auf dem AccessModifier der gesuchten Variable erkl�rt werden.
 - ? Parser Klasse wird zur Abstrakten Oberklasse. wird unterteilt in -> SharpSParser,EditorParser ?
 - lexer.txt, log.txt zu .log aendern und in eigenem /log Ordner aufbewahren
 - booleansche Logik &, && ; |, || richtig implementieren
 - ? Betragsstriche |a|?
 - ?skalar (a|a) ?
 - Überschreiben von Rechenoperationen für Objekte

int a = 2² + |test()| * (a|a)
int a = pow(2,2) + abs(test()) * (a*a)
