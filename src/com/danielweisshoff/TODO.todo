/////////////////////////////////////////////////////////////////////////
  MASTER TODOLIST   MASTER TODOLIST MASTER TODOLIST     MASTER TODOLIST
/////////////////////////////////////////////////////////////////////////

ROADMAP:
v1.0 - Funktionale Scriptsprache
v1.1 - bytecode und interpreter
v1.2 - Code organisieren und strukturieren
v2.0 - OOP
v2.x - QOL und Features

TODO VERSION 0.1 -- Funktionale Scriptsprache:
[x] booleansche Logik &, &&, |, || implementieren
[x] - & (bitwise AND)
[x] - | (bitwise OR) 
[x] verkettung von conditions
[x] conditions klammern
[x] variablen
[x] Die *Build Klassen in den Parser einbauen
[x] += operand
[x] -= Operand
[x] *= Operand
[x] /= Operand
[x] %= Operand
[x] while
[x] do-while
[x] for
[x] *in for-loop initialisierte var ist im falschen scope!!*
[x] *ALLE KEYWORDS IN EIGENE TOKENS*
[x] statische variablentypen	
[x] automatic type-conversion
[x] type-conversion with loss (int a = 1 / 2 -> a = 0)
[x] alle primitiven zahlentypen
[x] +=, -=, *=, /=  sollen zu normalen assignNode geparsed werden    (x+= 1 * 2 -> x = x + (1 * 2) )
[x] Dateiendung in .#s aendern
[x] curToken.value.equals(value) -> curToken.compare(value)
[x] manche TokenTypes umbenennen (ADD -> PLUS)
[x] instanceof durch NodeType(enum) ersetzen   	*140ms für parser*
[x] MOD operator zu Token.isOP() hinzufuegen
[x] schleifen erzeugen i Scopes im SymbolTable (stattdessen SymbolTable des scopes clearen un reusen)
[x] schauen, warum Parser so langsam ist
[x] ?EqualAssignNode redundant, einfach AssignNode benutzen?
[x] Pointer 
[x] ++x, x++ Operand (Increment)
[x] --x, x-- Operand (Decrement)
[/] Errorchecking verbessern  
[x] arrays -> ArrayNode
[-] Nutzerfunktionen
[-] Parameter
[-] Rueckgabewerte
[-] Ein paar builIn Funktionen
[-] char
[-] string als char[]
[-] casting int()
[-] pointer arithmetic
[-] << (left shift) 
[-] >> (right shift) 
[-] ^ (bitwise XOR) 
[-] ~ (bitwise NOT)
[-] Testen ob bitwise &,| funktionieren
[-] Enums




TODO VERSION 1.0 -- OOP:
[-] Klassen
[-] Strings als erste Klasse
[-] Objekte sollen als Parameter/R�ckgabewert m�glich sein
[-] access modifier hinzufuegen
[-] public +
[-] private -
[-] static *
[ ] (protected?) /
[-] read r
[-] write w
[-] foreach
[-] Interfaces
[-] Vererbung
[-] Überschreiben von Rechenoperationen für Objekte

QOL:
[-] Formatierte Strings   f("Das {} ist {}F",fahrzeug,farbe)
[-] The datetime calculation on the Log class is fucking slow
[ ] ?Preprocessor?
[ ] ? Betragsstriche |a|?
[-] der Cmpiler unterscheidet schlecht zwischen Initialization und Declaration
   int i			#declaration
   int i = 10 		#both
    i = 10			#initialization

*!NEUE SYNTAX?*:

MatLab hat sehr schöne Syntax zum erzeugen von arrays und generell iterativen Strukturen

	for (int x = 0,arr.len,1):
		#code

	for (int x = 0, x <= 10, x++):
		#code

    int x (0,10,1):
        #code

    for int x (10,>0,-1):
        #code    

    for int x (10,x>0,-1):
        #code    

Momentaner Ablauf:

Interpretieren:	
1. Lexer
2. Parser
3. Interpreter + Symboltable -> ConversionChecking

Compilen (noch nicht eingefuegt):
1. Lexer
2. Parser			  (Syntax) + Symboltable
3. Semantic Analysis  (name binding, type checking,
   flow check(unreachable code, missing returns, ...))
4. AST Optimizer
5. ByteCode Generator
6. ByteCode Optimizer
